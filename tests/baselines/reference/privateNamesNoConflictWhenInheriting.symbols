=== tests/cases/conformance/classes/members/privateNames/privateNamesNoConflictWhenInheriting.ts ===
// @target es6

class A {
>A : Symbol(A, Decl(privateNamesNoConflictWhenInheriting.ts, 0, 0))

    #foo: number;
>#foo : Symbol(A.#foo, Decl(privateNamesNoConflictWhenInheriting.ts, 2, 9))
}

class B extends A {
>B : Symbol(B, Decl(privateNamesNoConflictWhenInheriting.ts, 4, 1))
>A : Symbol(A, Decl(privateNamesNoConflictWhenInheriting.ts, 0, 0))

    #foo: string;    // OK: private names are unique to each class
>#foo : Symbol(B.#foo, Decl(privateNamesNoConflictWhenInheriting.ts, 6, 19))
}

const b: A = new B() // OK
>b : Symbol(b, Decl(privateNamesNoConflictWhenInheriting.ts, 10, 5))
>A : Symbol(A, Decl(privateNamesNoConflictWhenInheriting.ts, 0, 0))
>B : Symbol(B, Decl(privateNamesNoConflictWhenInheriting.ts, 4, 1))

