=== tests/cases/conformance/classes/members/privateNames/privateNamesInNestedClasses.ts ===
// @target es6

class A {
>A : Symbol(A, Decl(privateNamesInNestedClasses.ts, 0, 0))

   #foo = "A's #foo";
>#foo : Symbol(A.#foo, Decl(privateNamesInNestedClasses.ts, 2, 9))

   #bar = "A's #bar";
>#bar : Symbol(A.#bar, Decl(privateNamesInNestedClasses.ts, 3, 21))

   method () {
>method : Symbol(A.method, Decl(privateNamesInNestedClasses.ts, 4, 21))

       class B {
>B : Symbol(B, Decl(privateNamesInNestedClasses.ts, 5, 14))

           #foo = "B's #foo";
>#foo : Symbol(B.#foo, Decl(privateNamesInNestedClasses.ts, 6, 16))

           bar (a: any) {
>bar : Symbol(B.bar, Decl(privateNamesInNestedClasses.ts, 7, 29))
>a : Symbol(a, Decl(privateNamesInNestedClasses.ts, 8, 16))

               a.#foo; // OK, no compile-time error, don't know what `a` is
>a : Symbol(a, Decl(privateNamesInNestedClasses.ts, 8, 16))
           }
           baz (a: A) {
>baz : Symbol(B.baz, Decl(privateNamesInNestedClasses.ts, 10, 12))
>a : Symbol(a, Decl(privateNamesInNestedClasses.ts, 11, 16))
>A : Symbol(A, Decl(privateNamesInNestedClasses.ts, 0, 0))

               a.#foo; // compile-time error, shadowed
>a : Symbol(a, Decl(privateNamesInNestedClasses.ts, 11, 16))
           }
           quux (b: B) {
>quux : Symbol(B.quux, Decl(privateNamesInNestedClasses.ts, 13, 12))
>b : Symbol(b, Decl(privateNamesInNestedClasses.ts, 14, 17))
>B : Symbol(B, Decl(privateNamesInNestedClasses.ts, 5, 14))

               b.#foo; // OK
>b.#foo : Symbol(B.#foo, Decl(privateNamesInNestedClasses.ts, 6, 16))
>b : Symbol(b, Decl(privateNamesInNestedClasses.ts, 14, 17))
           }
       }
       const a = new A();
>a : Symbol(a, Decl(privateNamesInNestedClasses.ts, 18, 12))
>A : Symbol(A, Decl(privateNamesInNestedClasses.ts, 0, 0))

       new B().bar(a);
>new B().bar : Symbol(B.bar, Decl(privateNamesInNestedClasses.ts, 7, 29))
>B : Symbol(B, Decl(privateNamesInNestedClasses.ts, 5, 14))
>bar : Symbol(B.bar, Decl(privateNamesInNestedClasses.ts, 7, 29))
>a : Symbol(a, Decl(privateNamesInNestedClasses.ts, 18, 12))

       new B().baz(a);
>new B().baz : Symbol(B.baz, Decl(privateNamesInNestedClasses.ts, 10, 12))
>B : Symbol(B, Decl(privateNamesInNestedClasses.ts, 5, 14))
>baz : Symbol(B.baz, Decl(privateNamesInNestedClasses.ts, 10, 12))
>a : Symbol(a, Decl(privateNamesInNestedClasses.ts, 18, 12))

       const b = new B();
>b : Symbol(b, Decl(privateNamesInNestedClasses.ts, 21, 12))
>B : Symbol(B, Decl(privateNamesInNestedClasses.ts, 5, 14))

       new B().quux(b);
>new B().quux : Symbol(B.quux, Decl(privateNamesInNestedClasses.ts, 13, 12))
>B : Symbol(B, Decl(privateNamesInNestedClasses.ts, 5, 14))
>quux : Symbol(B.quux, Decl(privateNamesInNestedClasses.ts, 13, 12))
>b : Symbol(b, Decl(privateNamesInNestedClasses.ts, 21, 12))
   }
}

new A().method();
>new A().method : Symbol(A.method, Decl(privateNamesInNestedClasses.ts, 4, 21))
>A : Symbol(A, Decl(privateNamesInNestedClasses.ts, 0, 0))
>method : Symbol(A.method, Decl(privateNamesInNestedClasses.ts, 4, 21))

